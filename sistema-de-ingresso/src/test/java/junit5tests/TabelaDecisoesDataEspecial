package junit5tests;

import models.LoteModel;
import models.ShowModel;
import models.TipoIngressoEnum;
import repository.ShowRepository;
import services.ShowServices;
import utilstests.InMemoryShowRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@Tag("functional")
public class TabelaDecisoesDataEspecial {
    private ShowRepository showRepository;
    private ShowServices showServices;

    @BeforeEach
    void setUp() {
        // Instanciando o repositório em memória
        showRepository = new InMemoryShowRepository();
        showServices = new ShowServices(showRepository);
    }

    @Test
    @DisplayName("Criar show em data especial e verificar despesas")
    void testCriarShowEmDataEspecial() {
        Date data = new Date();
        String artista = "Artista Teste";
        Double cache = 1000.0;
        Double totalDespesas = 2000.0;
        Integer quantLotes = 1;
        Integer quantIngressosPorLote = 100;
        Double precoNormal = 10.0;
        Boolean isDataEspecial = true;
        Double descontoLote = 0.00;
        double vip = 20;

        // Execute o método criarShow
        showServices.criarShow(data, artista, cache, totalDespesas, quantLotes, quantIngressosPorLote, precoNormal, isDataEspecial, descontoLote, vip);

        // Verificar se o show foi salvo corretamente
        Optional<ShowModel> optionalShow = showRepository.findById(data, artista);
        assertTrue(optionalShow.isPresent(), "O show deveria estar presente no repositório");
        
        ShowModel show = optionalShow.get();
        assertEquals(totalDespesas * 1.15, show.getDespesasInfra(), 0.01);
    }

    @Test
    @DisplayName("Criar show em data normal e verificar despesas")
    void testCriarShowEmDataNormal() {
        Date data = new Date();
        String artista = "Artista Teste";
        Double cache = 1000.0;
        Double totalDespesas = 2000.0;
        Integer quantLotes = 1;
        Integer quantIngressosPorLote = 100;
        Double precoNormal = 10.0;
        Boolean isDataEspecial = false;
        Double descontoLote = 0.00;
        double vip = 20;

        // Execute o método criarShow
        showServices.criarShow(data, artista, cache, totalDespesas, quantLotes, quantIngressosPorLote, precoNormal, isDataEspecial, descontoLote, vip);

        // Verificar se o show foi salvo corretamente
        Optional<ShowModel> optionalShow = showRepository.findById(data, artista);
        assertTrue(optionalShow.isPresent(), "O show deveria estar presente no repositório");
        
        ShowModel show = optionalShow.get();
        assertEquals(totalDespesas, show.getDespesasInfra(), 0.01);
    }
}
